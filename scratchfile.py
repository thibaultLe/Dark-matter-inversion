# -*- coding: utf-8 -*-
"""
Created on Tue Aug 16 15:55:45 2022

@author: Thibault
"""

import numpy as np
from matplotlib.pylab import plt

import orbitModule

# #Amount of dark matter shells
N = 5

# #Max x limit (in AU)
xlim = 2500

# mis,ris = orbitModule.get_BahcallWolf_DM(N, xlim)
# mis,ris = orbitModule.get_Plummer_DM(N, xlim)
# # print(mis)
# plt.plot(ris,mis1)

# mis2,ris = orbitModule.get_BahcallWolf_DM(N, xlim,rho0=5e-11)
# # print(mis)
# plt.plot(ris,mis2)


# mis3,ris = orbitModule.get_BahcallWolf_DM(N, xlim)
# # print(mis)
# plt.plot(ris,mis3)

# bestbahc = orbitModule.getBestBahcallFit(mis)

# bestplum = orbitModule.getBestPlummerFit(mis)


# recon = [0.00017840673181399353, 0.00021272182659406007, 0.00023651092658363629, 0.0002543306682893427, 0.0002469980612553989]

# plt.figure()
# plt.scatter(ris,mis,label='True,loss=0')
# plt.scatter(ris,recon,label='Reconstructed,loss=0.0038')
# plt.scatter(ris,bestbahc,label='Best Bahcall fit,loss=0.0039,fitdiff=3.9e-7')
# plt.scatter(ris,bestplum,label='Best Plummer fit,loss=88.96,fitdiff=1.8e-4')

# rp = 119.52867
# ra = 1948.96214
# plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
# plt.axvline(ra,linestyle='--',color='black')
# plt.ylabel('Mass [MBH masses]')
# plt.xlabel('Distance from MBH [AU]')

# plt.legend()
# plt.scatter(ris,mis,label='True')


# #Dark matter mascons (in MBH masses units), Mascon distance from MBH (in AU)
# mis,ris = orbitModule.get_Plummer_DM(N, xlim)

# M_0, D_0, T_0 = orbitModule.getBaseUnitConversions()


# IC = orbitModule.get_S2_IC()
    
    
# #Time grid:
# t_grid =  np.append(0,(np.linspace(0,16.056,2) * 365.25 * 24 * 60**2 /T_0 ) + 84187.772)

# ta = orbitModule.buildTaylorIntegrator(True, N,compact_mode=False)
#TODO: make a setup file (datasets, taylor integrators)



# mis, ris = orbitModule.get_BahcallWolf_DM(N, xlim)

# 
# ic_guess = orbitModule.get_S2_IC()



# print('Starting from 0')
# dm_guess = N*[0]
# print('Starting from true masses')
# dm_guess = mis.copy()
# print('Starting from Plummer')
# dm_guess, _ = orbitModule.get_Plummer_DM(N, xlim)
# print('Starting from Random IG')
# np.random.seed(0)
# noiseLevel = 0.5*max(mis)
# noise = np.random.normal(0,noiseLevel,len(mis))
# dm_guess = mis.copy() + noise


# filename = 'Datasets/BahcallWolf_N={}.txt'.format(N)
# filename = 'Datasets/Plummer_N={}.txt'.format(N)
# mis,ris = orbitModule.get_Plummer_DM(N, xlim)
# mis,ris = orbitModule.get_BahcallWolf_DM(N, xlim)

# reconmis = orbitModule.getBestBahcallFit(filename)


# plt.figure()
# plt.scatter(ris,mis,label='True,loss=0')
# plt.scatter(ris,reconmis,label='Bahcall best fit to observations')

# rp = 119.52867
# ra = 1948.96214
# plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
# plt.axvline(ra,linestyle='--',color='black')
# plt.ylabel('Mass [MBH masses]')
# plt.xlabel('Distance from MBH [AU]')

# plt.legend()


# orbitModule.lossLandscape()
# print('\007')


mis,ris = orbitModule.get_BahcallWolf_DM(N, xlim)
# mis,ris = orbitModule.get_Plummer_DM(N, xlim)

dens = []
for i in range(len(ris)):
    dens.append(mis[i]/(4*np.pi*(ris[i]**3)/3))

plt.figure()
plt.scatter(ris,mis,label='BahcallWolf')

rp = 119.52867
ra = 1948.96214
plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
plt.axvline(ra,linestyle='--',color='black')
plt.ylabel('Mass [MBH masses]')
plt.xlabel('Distance from MBH [AU]')

plt.legend()


plt.figure()
plt.scatter(ris,dens,label='BahcallWolf')

rp = 119.52867
ra = 1948.96214
plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
plt.axvline(ra,linestyle='--',color='black')
plt.ylabel('Density [MBH masses/(AUÂ³)')
plt.xlabel('Distance from MBH [AU]')

plt.legend()

# truelosses = orbitModule.lossesForDifferentNoiseProfiles(mis)

# means = np.mean(truelosses,axis=0)
# stddevs = np.std(truelosses,axis=0)

# plt.figure()
# plt.ylabel('Loss')
# plt.xlabel('Distance from MBH [AU]')
# plt.errorbar([1], means,stddevs,fmt='o',capsize=5,label='Mean and standard deviation')
# plt.legend()
# plt.title('Loss of true masses')

# print(stddevs)




# ta = orbitModule.buildTaylorIntegrator(True,N,LOAD_PICKLE=True)
# # # # #1e-2 precision
# # # recon = [0.00018418, 0.00020512, 0.00023123, 0.00026642, 0.00023463]
# # # # # 1e-1 precision
# # # # # recon = [0.00018466, 0.00020523, 0.00023133, 0.00026551, 0.00022547]
# # # # # #1*precision
# # # # # recon = [0.00020717, 0.00021442, 0.00022311, 0.00023224, 0.00019073]
# bahc, _ = orbitModule.get_BahcallWolf_DM(N, xlim)
# plum, _ = orbitModule.get_Plummer_DM(N, xlim)
# dm_guess = N*[0]
# ic_guess = orbitModule.get_S2_IC()
# # obslist = orbitModule.reconstructFromFile('Datasets/BahcallWolf_N={}.txt'.format(N), \
# #          orbitModule.get_S2_IC(),bestplum, ADD_NOISE = True, noisefactor = 1,seed=0)
   
# # lossplum = orbitModule.loss(ta,orbitModule.get_S2_IC(),bestplum,obslist)

# # reconmises = [[0.00018624861162560118, 0.0001244966925909537, 0.00040455939581821065, 0.00015517920733820612, 0.00022669821790041354], [0.00015121463737753773, 0.00026161918609407585, 0.00024246847596515945, 0.00022124673505386343, 2.0476655280018667e-05], [0.00024394970231982088, 0.00010675436950098375, 0.00021917571770683252, 0.00033087551136799537, 0.00022704260537191633], [0.00013534220372382245, 0.00033531201848940043, 0.00013415431447037703, 0.00027969953144400974, 0.0001198950175302711], [0.00019007315816527365, 0.00022083297314274717, 0.00017815925730681813, 0.00030323162542803255, 0.00026288780100512313], [0.0001921932385811937, 0.00024390313542099222, 0.00011900187484028559, 0.0003432373047809136, 0.000382575561777614], [0.00020671242335055875, 0.0001513791237690928, 0.0002673459602296172, 0.00026206212913322123, 0.00035440908859504214]]


# losses = []
# for i in range(100):
#     obslist = orbitModule.reconstructFromFile('Datasets/BahcallWolf_N={}.txt'.format(N), \
#             ic_guess,dm_guess, ADD_NOISE = True, noisefactor = 1e-1,seed=i)
        
#     lossrec = orbitModule.loss(ta,ic_guess,[0.00019567791458204403, 0.00020695599885984977, 0.00022348407112402668, 0.00025211997072400577, 0.00022235737431719154],obslist)
#     lossbahc = orbitModule.loss(ta,ic_guess,bahc,obslist)
#     lossplum = orbitModule.loss(ta,ic_guess,plum,obslist)
    
#     losses.append([lossbahc,lossrec,lossplum])
#     # losses.append([lossbahc,lossplum])

# # print(losses)

# means = np.mean(losses,axis=0)
# stddevs = np.std(losses,axis=0)
# # print(means)
# # print(stddevs)

# plt.figure()
# x = [1,2,3]
# # x = [1,2]
# plt.errorbar(x, means,stddevs,fmt='o',capsize=5)
# plt.xticks(x,['Bahcall(True)','Reconstructed','Plummer'])
# # plt.xticks(x,['Bahcall(True)','Plummer'])
# plt.hlines(means[0],xmin=x[0],xmax=x[-1],linestyles='--')
# plt.ylabel('Loss')
# plt.title('Loss for 20 different noise profiles')



# losses = [0.9141800888276993, 0.9295392828027131, 0.9069935602591922, 0.8813552007566494, 0.8829314682381686, 0.8955538289103671, 0.8975450808134622, 0.9331040234529282, 0.885066048403642, 0.8867336368781921]


# reconmises = [[0.00024368027401892194, 0.00011796736357814874, 0.00019231049927518107, 0.00034830595947973756, 0.0003090485223049379], [0.0002556667853165578, 9.260329962221912e-05, 0.00020242169607793744, 0.0003531993452761939, 0.00033857045603730466], [0.00020848753870741742, 0.0002465012824218296, 4.2927484039499784e-05, 0.0004107756644592079, 3.3751537241582455e-05], [0.00020845161960333613, 0.00015551754169176074, 0.00024793228227171086, 0.0002767452661624652, 0.00028978844661467837], [0.00019206658157788038, 0.000238000445023237, 0.00012716704352368872, 0.00033946861424023864, 0.00017542154505039128], [0.00019441176717193505, 0.00011388633165444601, 0.0003973214396902966, 0.0001652191483410662, 0.00018621697914896488], [0.0001597704313785449, 0.0002476405635991377, 0.0002335009607682158, 0.00023801103607562404, 0.0], [0.0002580994496873799, 8.804093295117373e-05, 0.00020302616462777558, 0.00035522801491926365, 0.0001778409029930198], [0.000153967970358146, 0.0003144830738062565, 0.00010600509112440992, 0.0003155989698560129, 8.073706228202852e-05], [0.0002061440783403853, 0.00020009359750429993, 0.00015670712420300597, 0.0003340911939622137, 0.00021604115601235927]]

# initloss = 0.90411
# plt.figure()
# plt.plot(losses)
# plt.hlines(initloss,0,len(losses))

# newmises = []
# for i in range(len(losses)):
#     if losses[i] < 0.9:
#         newmises.append(reconmises[i])

# newmises = np.array(newmises)

# mins = np.amin(newmises,axis=0)
# maxs = np.amax(newmises,axis=0)

# means = np.mean(newmises,axis=0)
# stddevs = np.std(newmises,axis=0)

# recon = [0.00019277684960327385, 0.00020561464247883566, 0.00022461349606216937, 0.00025770636470701694, 0.00022678116366677142]

# plt.figure()
# plt.scatter(ris,recon,label='Reconstructed,loss=0.904')
# plt.scatter(ris,plum,label='Plummer,loss=11')
# plt.scatter(ris,mis,label='Bahcall,loss=0.88')
# plt.ylabel('Mass [MBH masses]')
# plt.xlabel('Distance from MBH [AU]')
# plt.errorbar(ris, means,stddevs,fmt='o',capsize=5,color='purple',label='Stddev')

# # plt.plot(ris,mins,label='Min')
# # plt.plot(ris,maxs,label='Max')
# rp = 119.52867
# ra = 1948.96214
# plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
# plt.axvline(ra,linestyle='--',color='black')

# plt.legend()





#5 mascons,  1e-2*precision, 7 times, random IG:
# reconmises = [[0.00018624861162560118, 0.0001244966925909537, 0.00040455939581821065, 0.00015517920733820612, 0.00022669821790041354], [0.00015121463737753773, 0.00026161918609407585, 0.00024246847596515945, 0.00022124673505386343, 2.0476655280018667e-05], [0.00024394970231982088, 0.00010675436950098375, 0.00021917571770683252, 0.00033087551136799537, 0.00022704260537191633], [0.00013534220372382245, 0.00033531201848940043, 0.00013415431447037703, 0.00027969953144400974, 0.0001198950175302711], [0.00019007315816527365, 0.00022083297314274717, 0.00017815925730681813, 0.00030323162542803255, 0.00026288780100512313], [0.0001921932385811937, 0.00024390313542099222, 0.00011900187484028559, 0.0003432373047809136, 0.000382575561777614], [0.00020671242335055875, 0.0001513791237690928, 0.0002673459602296172, 0.00026206212913322123, 0.00035440908859504214]]

#5 mascons, 1e-2*precision, 10 times:
# reconmises = [[0.00018530972937819812, 0.0002043227981570452, 0.0002294512033426993, 0.0002680778300100017, 0.0002386415741204678], [0.00018748140151598393, 0.00020470500393116896, 0.00022769068174331798, 0.0002662043717049374, 0.00024149640762467342], [0.00018671015671614324, 0.00020403561760037398, 0.00022794561506629912, 0.0002678994750128778, 0.00024090898531877751], [0.00018587767009939658, 0.0002046805299850149, 0.00022882757896422012, 0.000267212929550852, 0.00024190345098002363], [0.00018700891645406602, 0.00020449305685714538, 0.00022797036981597515, 0.00026704429184557784, 0.00024181147918988315], [0.0001875997762732893, 0.00020424598927241066, 0.00022737435195375444, 0.0002672623613160679, 0.0002433722652087127], [0.00018655286133155787, 0.00020463661557978754, 0.00022823466150382552, 0.0002670728560241017, 0.00024223725467634543], [0.00018664575197052322, 0.00020445997334169206, 0.00022827743447389296, 0.0002673069331419706, 0.00024094348714971954], [0.0001865282609666108, 0.00020463745525371558, 0.00022864483869614635, 0.0002666596222982917, 0.00024077897473214938], [0.00018585758183067903, 0.0002040338427793832, 0.00022886641210828162, 0.00026832400214137607, 0.0002403660774846967]]

#10 masconsn, 1e-2*precision, 10 times:
# reconmises = [[9.487314335389145e-05, 9.887261917833845e-05, 0.00010468429813116658, 0.00011134127202939778, 0.00011914909628819616, 0.0001286893656147435, 0.00014130285824606482, 0.00016173072268178422, 0.00019253796053437958, 2.855306692767762e-10], [9.591181925748298e-05, 9.968496153777107e-05, 0.00010510200639473313, 0.00011126627330738126, 0.00011854749203019801, 0.00012762695938576147, 0.00014010464764548046, 0.00016143415948469155, 0.00019561976100556004, 2.1411166303025295e-10], [9.553512744169427e-05, 9.934849275629838e-05, 0.00010478762519181523, 0.0001110537214684974, 0.00011854822919336422, 0.000128000293290136, 0.00014085690126173969, 0.0001620482637183821, 0.00019496469010969717, 2.2034567960773075e-10], [9.516315792323185e-05, 9.911834744151887e-05, 0.00010486775411273768, 0.0001114003187228136, 0.00011896319145941976, 0.00012815853497421303, 0.00014057281420504493, 0.0001620370788571435, 0.0001956460345376304, 2.397340935198126e-10], [9.566753832085948e-05, 9.951747878173902e-05, 0.00010498671566792366, 0.00011123105885098553, 0.00011862448866002035, 0.00012780649323728728, 0.0001403674689915246, 0.0001619868931013983, 0.0001957491644239993, 2.48890969106638e-10], [9.598290052450148e-05, 9.96863975510207e-05, 0.00010496507632782768, 0.00011105398759922042, 0.00011835263249827657, 0.00012757539706754098, 0.00014034952055119406, 0.0001622479008187713, 0.00019737341414616475, 2.558543184777501e-10], [9.545799406697264e-05, 9.93619967644528e-05, 0.00010495475652724875, 0.00011131948124432729, 0.00011875585175926823, 0.00012791486384771452, 0.00014046195670303866, 0.00016192699054769398, 0.00019611033224591046, 3.3415728992613953e-10], [9.549552323088457e-05, 9.937036237207258e-05, 0.00010492449126058046, 0.00011125094485583312, 0.00011872452734398273, 0.00012805315925243667, 0.00014068280839436528, 0.00016176518622782406, 0.0001949192762757619, 3.357725463766402e-10], [9.547480997203989e-05, 9.933584285621541e-05, 0.00010492566285623155, 0.00011135675704975173, 0.00011889491668985859, 0.00012811393490911414, 0.0001405120689081104, 0.0001613932650302569, 0.00019482997964957055, 2.5277851471204817e-10], [9.510264334208272e-05, 9.906974649468971e-05, 0.00010471080932204091, 0.0001111439057215871, 0.00011885349073386807, 0.00012843470407146473, 0.00014118162722928006, 0.00016217638263996953, 0.00019421730726785504, 2.0810579833991042e-10]]

#10 mascons, 1* precision, 10 times:
# reconmises = [[7.906017687680468e-05, 8.70214915981417e-05, 9.959350045934144e-05, 0.0001135454397005508, 0.0001286605380809098, 0.0001443691232715209, 0.0001589616748358718, 0.0001664351068739926, 0.00015285853904929854, 0.0], [0.00012768688624475435, 0.00012598744845286708, 0.00012340252488446583, 0.00011917166885367854, 0.00011365784864470148, 0.00010702729575309322, 9.985514074825447e-05, 9.08829985651383e-05, 8.789662549714781e-05, 8.91582203175112e-12], [0.00010363318093822168, 0.00010547728246842125, 0.00010735939990867334, 0.00010968502745990019, 0.0001137198509241364, 0.0001210699723285127, 0.0001307554341390281, 0.00013602669920245454, 0.00013543698320621396, 1.0406588869962466e-10], [9.238856802397486e-05, 9.776097526535811e-05, 0.0001066485779316191, 0.00011538203698788837, 0.0001225083596459124, 0.0001274967551197389, 0.00013230734033408697, 0.00014793387137204607, 0.00016843527090227488, 2.219613565578883e-10], [0.00011528190337352437, 0.00011655696080640506, 0.00011724840816452047, 0.00011718375906073975, 0.00011697633608658399, 0.00011638226114472848, 0.00011650927939915621, 0.00012244372446420216, 0.0001267683967850959, 1.0499271010930608e-10], [0.00012549342576480133, 0.00012339290665910164, 0.00011957851797955092, 0.0001154322018683662, 0.00011193183397093167, 0.00010999922087960291, 0.00011105079095395046, 0.00011711060461802766, 0.00013793015251521723, 2.1300135531838453e-10], [0.00010622844654795814, 0.00010924747275887177, 0.00011324393590605086, 0.00011658701945024738, 0.00011865078886906604, 0.00011953031682610339, 0.00012200575675777031, 0.0001296467479294201, 0.00014828402858869268, 3.426375007421123e-10], [0.0001078167664386682, 0.00011037777927210509, 0.00011378117550728504, 0.00011657523675993695, 0.00011947174629807211, 0.000123578699199312, 0.00012781346576586956, 0.00012916246746042093, 0.00013019329997568653, 2.4434652717872696e-10], [0.00010847843035465893, 0.00011049660688089807, 0.00011409497167568692, 0.0001182155897887327, 0.00012160952234454588, 0.00012295233249064175, 0.00012192397958814596, 0.00011769973543494099, 0.00012082385519504689, 1.9355288764363806e-10], [8.643491618348011e-05, 9.312015091915821e-05, 0.00010163574233120474, 0.00011043877889518113, 0.00012246411848430326, 0.00013725845781509635, 0.00015198630041261764, 0.00016569844600619875, 0.00016795993301654905, 0.0]]

    #7 1*precision:
# reconmises =[[0.00018703836825569872, 0.00020791548168207517, 0.00023268706245735524, 0.0002575810807778432, 0.0002036681504484885], [0.00023188582036937715, 0.0002243978622800245, 0.00021203267387428094, 0.0001941530263373989, 0.00015096991808655061], [0.000206189974387885, 0.00020856745899326573, 0.00021435112961481963, 0.00022659389427756078, 0.00018259589950696487], [0.00019800252256325948, 0.00021142156909059254, 0.00022204035230594885, 0.0002310745625382784, 0.00020428195503568482], [0.00022173150533440303, 0.00022081222266630808, 0.00021832887426831744, 0.0002157127499457991, 0.00017836613252235364], [0.00023037041015996427, 0.00022228148223741692, 0.0002142727570693219, 0.0002100163023019431, 0.0001819876351868916], [0.00021210335362775026, 0.00021690433021044633, 0.00021833780532783538, 0.0002198673853993069, 0.0001902528389028302]]
#20 * 1*precision:
# reconmises = [[0.00018703836825569872, 0.00020791548168207517, 0.00023268706245735524, 0.0002575810807778432, 0.0002036681504484885], [0.00023188582036937715, 0.0002243978622800245, 0.00021203267387428094, 0.0001941530263373989, 0.00015096991808655061], [0.000206189974387885, 0.00020856745899326573, 0.00021435112961481963, 0.00022659389427756078, 0.00018259589950696487], [0.00019800252256325948, 0.00021142156909059254, 0.00022204035230594885, 0.0002310745625382784, 0.00020428195503568482], [0.00022173150533440303, 0.00022081222266630808, 0.00021832887426831744, 0.0002157127499457991, 0.00017836613252235364], [0.00023037041015996427, 0.00022228148223741692, 0.0002142727570693219, 0.0002100163023019431, 0.0001819876351868916], [0.00021210335362775026, 0.00021690433021044633, 0.00021833780532783538, 0.0002198673853993069, 0.0001902528389028302], [0.00021483901992943888, 0.00021858554136994934, 0.00022191100903150215, 0.00022567741068464856, 0.00018324542736785092], [0.00021437662775221618, 0.0002188289135040638, 0.00022187516985563497, 0.00021773628515286896, 0.00017590802634166166], [0.00019346962686811583, 0.00020724308900815452, 0.00022716281021545437, 0.000251378094669539, 0.00020894279644503508], [0.00021542019686760348, 0.0002163185898986923, 0.00021716130410818035, 0.00022178712244672088, 0.00019603423232958], [0.00021631976091949514, 0.00021871042480973952, 0.00022095502734896148, 0.00022573364283105284, 0.00019064698572577029], [0.00019683318086264115, 0.00020949500001284834, 0.00022229308304152668, 0.00025146523041213146, 0.00025021914892032755], [0.00020226730252042023, 0.00020912383399928437, 0.00021775421548118578, 0.0002365290078546901, 0.00022472720611044133], [0.00017119624928569433, 0.00019411673066736983, 0.00022295167070306488, 0.0002702612172817495, 0.00027374873462530897], [0.00022084730854070452, 0.00022209194633431844, 0.00021952165205991727, 0.00022264496817721424, 0.00019201734445925024], [0.0002285109181711166, 0.00022336410677327486, 0.00021353489136262906, 0.00020361001876713358, 0.00014769719024697265], [0.0002246048218356004, 0.00022249869551322965, 0.00022107989531506333, 0.0002143398485535898, 0.00016626678068046066], [0.0002244959486983243, 0.000221345549933566, 0.00022053111740443984, 0.0002129761087615748, 0.0001670588446570502], [0.0002068266979005548, 0.00020891872497473437, 0.00021583696574248144, 0.00023548032753678967, 0.00023856167092580383]]

# mis, ris = orbitModule.get_BahcallWolf_DM(N, xlim)
# means = np.mean(reconmises,axis=0)
# print(list(means))
# stddevs = np.std(reconmises,axis=0)
# # print(means)
# # print(stddevs)

# # means = [9.06191522e-05, 9.90597203e-05, 1.07073521e-04, 1.13620247e-04,
# #  1.21064573e-04, 1.32862627e-04, 1.45419327e-04, 1.45091057e-04,
# #  1.79314497e-04, 2.50670179e-10]

# plt.figure()
# # x = [1,2,3]
# plt.scatter(ris,mis,label='Bahcall')
# plt.errorbar(ris, means,stddevs,fmt='o',capsize=5,color='orange',label='Reconstructed')
# # plt.xticks(x,['Bahcall(True)','Reconstructed','Plummer'])
# # plt.hlines(means[0],xmin=x[0],xmax=x[-1],linestyles='--')
# plt.ylabel('Mass')
# plt.title('Reconstructions for 20 different noise profiles and initial guesses')
# plt.legend()

# plt.figure()
# plt.scatter(ris,mis,label='Bahcall')
# plt.boxplot(reconmises,positions=ris,widths=50,manage_ticks=False)
# # plt.xticks(ris)
# plt.legend()

# plt.figure()
# for i in range(len(reconmises)):
#     for j in range(len(ris)):
#         plt.scatter(ris[j],reconmises[i][j])
        
        
        
        

   

# #Reset the state
# ta.state[:] = np.append(IC,np.array(orbitModule.variationalEqsInitialConditions(N)))
# ta.pars[:N] = mis
# ta.pars[N:] = ris
# ta.time = 0
# #Simulate ta from initial guess (t=0) until t_obs
# out = ta.propagate_grid(t_grid)

# print(out[4])

# print('Phis')
# print(np.asarray(out[4][:,6:6+36]).copy())

# print('Psis')
# print(np.asarray(out[4][:,6+36:]).copy())




# IC = orbitModule.get_S2_IC()
# ic_guess = IC
# # ic_guess = np.multiply(IC, len(IC)*[1.000001])

# # dm_guess, _ = orbitModule.get_Plummer_DM(20,3000)
# dm_guess, _ = orbitModule.get_BahcallWolf_DM(20,3000)

# filename = 'Datasets/Plummer_N=20.txt'
# # filename = 'Datasets/BahcallWolf_N=20.txt'
# reconic, reconmis = orbitModule.reconstructFromFile(filename,ic_guess,dm_guess, \
#                                                     ADD_NOISE = True, noisefactor = 1e-1)


# rp = 119.52867
# ra = 1948.96214
# plt.figure()

# # mis, ris = orbitModule.get_BahcallWolf_DM(20,3000)
# # plt.scatter(ris,mis,label='BahcallWolf model')
# mis, ris = orbitModule.get_Plummer_DM(20,3000)
# plt.scatter(ris,mis,label='Plummer model')
# plt.scatter(ris,dm_guess,label='Initial guess',color='grey',alpha=0.5)
# plt.scatter(ris,reconmis,label='Reconstructed')
# plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
# plt.axvline(ra,linestyle='--',color='black')
# plt.xlabel("Distance from MBH [AU]")
# plt.ylabel("Mass [MBH masses]")
# plt.title('Reconstructed dark matter distribution')
# plt.legend()




# M_0, D_0, T_0 = orbitModule.getBaseUnitConversions()
# xlim = 3000
# #Amount of points in linspace
# n = 1000
# #Bahcall-Wolf cusp model:
# rDM = np.linspace(0,xlim,n)

# rho0plum = 1.69*10**(-10) * (D_0**3) / M_0
# # rho0cusp = 2.24*10**(-11) * (D_0**3) / M_0
# r0 = 2474.01


# N = len(mis)
# k = 0.1

    
# # Mascon model (mi, ri), sigmoid approximation of step function
# listOfSigs = [0.5 + 0.5 * np.tanh( k * (rDM - ris[i])) for i in range(N)]

# listOfRis = [reconmis[i]* listOfSigs[i] for i in range(N)]

# suml = listOfSigs[0]
# for i in range(1,len(listOfSigs)):
#     suml = suml + listOfSigs[i]
    
# sumRis = listOfRis[0]
# for i in range(1,len(listOfRis)):
#     sumRis = sumRis + listOfRis[i]
    

# listOfRis = [mis[i]* listOfSigs[i] for i in range(N)]
# suml = listOfSigs[0]
# for i in range(1,len(listOfSigs)):
#     suml = suml + listOfSigs[i]
    
# sumRisTrue = listOfRis[0]
# for i in range(1,len(listOfRis)):
#     sumRisTrue = sumRisTrue + listOfRis[i]
    
    
# listOfRis = [dm_guess[i]* listOfSigs[i] for i in range(N)]
# suml = listOfSigs[0]
# for i in range(1,len(listOfSigs)):
#     suml = suml + listOfSigs[i]
    
# sumRisInit = listOfRis[0]
# for i in range(1,len(listOfRis)):
#     sumRisInit = sumRisInit + listOfRis[i]

# # def enclosedMass(a,rho0):
# #     return (4 * a**3 * np.pi * r0**3 * rho0) / ( 3 * (a**2 + r0**2)**(3/2))

# #Plot enclosed mass
# plt.figure()
# plt.xlabel('Distance from MBH [AU]')
# plt.ylabel('Enclosed mass [MBH masses]')
# # plt.plot(rDM,enclosedMass(rDM,rho0plum),label='Plum model')
# plt.plot(rDM,sumRisInit,label='Initial guess',color='grey')
# plt.plot(rDM,sumRisTrue,label='True')
# plt.plot(rDM,sumRis,label='Reconstructed')
# plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
# plt.axvline(ra,linestyle='--',color='black')
# # plt.scatter(ris,np.cumsum(reconmis),label='Mascon enclosed mass',color='orange')
# # plt.bar(ris,np.cumsum(reconmis),width=(xlim)/(N),alpha=0.2,align='edge',edgecolor='orange',color='orange')
# plt.legend()
# plt.title('Enclosed mass')


# #Plot difference in enclosed mass
# plt.figure()
# plt.xlabel('Distance from MBH [AU]')
# plt.ylabel('Enclosed mass [MBH masses]')
# plt.plot(rDM,sumRis - sumRisTrue,label='Reconstructed - True')
# plt.axvline(rp,linestyle='--',label='rp and ra',color='black')
# plt.axvline(ra,linestyle='--',color='black')
# # plt.scatter(ris,np.cumsum(reconmis),label='Mascon enclosed mass',color='orange')
# # plt.bar(ris,np.cumsum(reconmis),width=(xlim)/(N),alpha=0.2,align='edge',edgecolor='orange',color='orange')
# plt.legend()
# plt.title('Difference in enclosed mass')




# mis, ris = orbitModule.get_BahcallWolf_DM(20,3000)
# plt.scatter(ris,mis,label='BahcallWolf model')
# plt.scatter(ris,[4.68829040e-05, 5.05236737e-05, 7.10157631e-05, 7.66324301e-05,
#  4.52505794e-05, 9.81870469e-05, 3.98887649e-05, 1.00197808e-04,
#  1.24203164e-04, 3.58286805e-05, 7.67945960e-05, 1.19875636e-04,
#  7.58824152e-05, 6.57998646e-05, 4.86998327e-05, 1.70169523e-04,
#  1.09653290e-04, 1.11013793e-04, 1.20395097e-04, 1.23693315e-04] ,label='Pygmo reconstruction')


# plt.legend()
# plt.xlabel("Distance from MBH [AU]")
# plt.ylabel("Mass [MBH masses]")